#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { createInterface } from 'readline';

const rl = createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise((resolve) => rl.question(query, resolve));
}

console.log(`🚀 WhatsApp Financial Bot Setup`);
console.log(`===============================\n`);

async function setupWhatsAppBot() {
  console.log(`This script will help you set up your WhatsApp financial analysis bot.\n`);
  
  // Check if .env.local exists
  const envExists = existsSync('.env.local');
  if (envExists) {
    console.log(`⚠️  .env.local already exists. This will create a backup and update it.\n`);
  }
  
  console.log(`📋 You'll need these from Meta Developer Console:`);
  console.log(`   🔗 https://developers.facebook.com/\n`);
  
  // Get WhatsApp credentials
  const accessToken = await question(`📱 WhatsApp Access Token (starts with EAA...): `);
  const phoneNumberId = await question(`📞 Phone Number ID (numeric): `);
  const verifyToken = await question(`🔐 Verify Token (your custom token): `);
  
  console.log(`\n🤖 Optional: OpenAI API Key for AI financial chat`);
  const openaiKey = await question(`🔑 OpenAI API Key (or press Enter to skip): `);
  
  // Create .env.local content
  const envContent = `# WhatsApp Financial Bot Configuration
# Generated by setup script on ${new Date().toISOString()}

# WhatsApp Cloud API
WHATSAPP_ACCESS_TOKEN=${accessToken}
WHATSAPP_PHONE_NUMBER_ID=${phoneNumberId}
WHATSAPP_VERIFY_TOKEN=${verifyToken}

# AI Chat (optional)
${openaiKey ? `OPENAI_API_KEY=${openaiKey}` : '# OPENAI_API_KEY=your_openai_key_here'}

# Development
NODE_ENV=development

# Financial APIs (already configured in Vercel production)
# ALPHA_VANTAGE_API_KEY=your_alpha_vantage_key
# FINANCIAL_MODELING_PREP_API_KEY=your_fmp_key
# NEWS_API_KEY=your_news_api_key
`;

  // Backup existing .env.local if it exists
  if (envExists) {
    writeFileSync('.env.local.backup', readFileSync('.env.local'));
    console.log(`\n💾 Backed up existing .env.local to .env.local.backup`);
  }
  
  // Write new .env.local
  writeFileSync('.env.local', envContent);
  console.log(`✅ Created .env.local with your credentials\n`);
  
  console.log(`🧪 Testing your setup...\n`);
  
  // Test webhook URL format
  const webhookUrl = `https://your-app.vercel.app/api/webhook`;
  console.log(`📡 Your webhook URL will be: ${webhookUrl}`);
  console.log(`🔐 Your verify token is: ${verifyToken}\n`);
  
  console.log(`📋 Next steps:`);
  console.log(`1. Start development server: npm run dev`);
  console.log(`2. Test locally: npm run verify:deployment`);
  console.log(`3. Deploy to Vercel: npx vercel --prod`);
  console.log(`4. Configure webhook in Meta Developer Console:`);
  console.log(`   - Webhook URL: https://your-app.vercel.app/api/webhook`);
  console.log(`   - Verify Token: ${verifyToken}`);
  console.log(`   - Subscribe to: messages, message_status`);
  console.log(`5. Add test phone number in Meta console`);
  console.log(`6. Test by texting: "help" to your bot\n`);
  
  console.log(`🎯 Bot Commands:`);
  console.log(`   📊 "analyze AAPL" - Stock analysis`);
  console.log(`   📈 "market summary" - Market data`);
  console.log(`   💬 "should I invest in tech?" - AI financial chat`);
  console.log(`   ❓ "help" - Show commands\n`);
  
  const startNow = await question(`🚀 Start development server now? (y/n): `);
  
  rl.close();
  
  if (startNow.toLowerCase() === 'y' || startNow.toLowerCase() === 'yes') {
    console.log(`\n🔄 Starting development server...`);
    console.log(`📱 Your WhatsApp bot will be available at: http://localhost:3000/api/webhook\n`);
    
    // Note: In a real implementation, you'd spawn the dev server here
    console.log(`Run: npm run dev`);
  } else {
    console.log(`\n✅ Setup complete! Run 'npm run dev' when ready to test.\n`);
  }
}

setupWhatsAppBot().catch(console.error); 